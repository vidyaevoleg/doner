var Topdoner = angular.module('Topdoner', ['yaMap','ui.router','templates','ngSanitize','ui.router.metatags']);


function runBlock($rootScope, MetaTags) {
    $rootScope.MetaTags = MetaTags;
}

function configure($urlRouterProvider, $stateProvider, UIRouterMetatagsProvider) {
    UIRouterMetatagsProvider
        .setTitlePrefix(' ')
        .setTitleSuffix(' | Обзоры на шаурму')
        .setDefaultTitle('Topdoner')
        .setDefaultDescription('Обзоры на самую изысканую и наивкуснейшую шаурму по всему миру. Авторитетные мнения, подробные ревью и глубокая аналитика.')
        .setDefaultKeywords('шаурма, обзоры на шаурму, аналитика, Москва, карта, Питер, Санкт-Петербург, Московская область')
        .setStaticProperties({
                'fb:app_id': '529146080586779',
                'og:site_name': 'http://topdoner.com'
            })
        .setOGURL(true);
}

Topdoner.run(['$rootScope', 'MetaTags', runBlock]);

Topdoner.filter('isRated', function () {
  return function(items) {
    return items.filter(function(item){
      return parseInt(item.properties.rating) > 0
    })
  }
});

Topdoner.filter('getPlaceById', function() {
  return function(input, id) {
    var i=0, len=input.length;
    for (; i<len; i++) {
      if (input[i].properties.id == id) {
        return input[i];
      }
    }
    return null;
  }
});

Topdoner.filter('getReviewById', function() {
  return function(input, id) {
    var i=0, len=input.length;
    for (; i<len; i++) {
      if (input[i].id == id) {
        return input[i];
      }
    }
    return null;
  }
});


Topdoner.run['$rootScope', '$location', (function($rootScope, $location) {

  $rootScope.$on('$locationChangeSuccess', function() {
    $rootScope.actualLocation = $location.path();
  });

})];

Topdoner.service('dataProvider', ['places','users', 'reviews', '$stateParams', '$filter','$rootScope', function (places, users, reviews, $stateParams, $filter, $rootScope) {
	

	if (!($rootScope.current_user)) {
    users.getCurrentUser().then(function(data){
    	$rootScope.current_user = data;
    })
  }
	
	var obj = {
		getPlaces: function (id) {
	    if (!($rootScope.places)) {
		    return places.getPlaces().then(function(data){
		    	if (id) {
			    	$rootScope.place = $filter('getPlaceById')(data, id);
		    	}
				$rootScope.places = data;
				angular.forEach($rootScope.places, function (place) {
    				place.properties.rating = parseFloat(place.properties.rating);
   				});
		    })
	    } else {
				$rootScope.place = $filter('getPlaceById')($rootScope.places, id);
		  }
		},
		getReviews: function (ids) {
			var place_id = ids['place_id'],
					review_id = ids['review_id'];
	    return places.getReviews(place_id).then(function(res) {
				if (review_id) {
					$rootScope.review = $filter('getReviewById')(res.data, review_id);
				}
				$rootScope.reviews = res.data;
				angular.forEach($rootScope.reviews, function (review) {
    				review.min_price = parseFloat(review.min_price);
					review.max_price = parseFloat(review.max_price);
   				});
	    });
		}
	}
	return obj;
}]);


//Topdoner.run(function($rootScope, $location){
//   //Bind the `$locationChangeSuccess` event on the rootScope, so that we dont need to 
//   //bind in induvidual controllers.
//
//   $rootScope.$on('$locationChangeSuccess', function() {
//        $rootScope.actualLocation = $location.path();
//    });        
//
//   $rootScope.$watch(function () {return $location.path()}, function (newLocation, oldLocation) {
//        if($rootScope.actualLocation === newLocation) {
////            alert('Why did you use history back?');
//			window.location.reload();
//        }
//    });
//});


Topdoner.config(['$stateProvider','$urlRouterProvider',
	function($stateProvider, $urlRouterProvider) {
	  $stateProvider
		.state('home', {
		  resolve: {
	  		places: ['dataProvider', function(dataProvider) {
	  			return dataProvider.getPlaces();
	  		}]
			},
		  url: '/home',
		  templateUrl: "<%= asset_path('templates/index.html.erb') %>",
		  controller: 'PlacesCtrl',
	    metaTags: {
        title: 'Topdoner',
        description: 'Обзоры на самую пиздатую и наивкуснейшую шаурму по всему миру. Авторитетные мнения, подробные ревью и глубокая аналитика.'
	    }
		})
		.state('places', {
		  resolve: {
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}],
			  reviews: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getReviews({place_id: $stateParams.id});
	  		}]
			},
		  url: '/places/{id}',
		  templateUrl: "<%= asset_path('templates/place.html.erb') %>",
		  controller: 'PlaceCtrl',
	    metaTags: {
        title: ['$rootScope', function($rootScope){
        	return 'Topdoner | ' + $rootScope.metaTitlePlace($rootScope.place);
        }],
        description: ['$rootScope', function($rootScope){
        	return 'Topdoner | ' + $rootScope.metaDescriptionPlace($rootScope.place);
        }]
	    }
		})
		.state('show_review', {
		  resolve: {
			  reviews: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getReviews({place_id: $stateParams.id, review_id: $stateParams.review_id });
	  		}],	  
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]
			},
		  url: '/places/{id}/reviews/{review_id}',
		  templateUrl: "<%= asset_path('templates/place.html.erb') %>",
		  controller: 'PlaceCtrl',
	    metaTags: {
        title: ['$rootScope', function($rootScope){
        	return 'Topdoner | ' + $rootScope.metaTitleReview($rootScope.review);
        }],
        description: ['$rootScope', function($rootScope){
        	return 'Topdoner | ' + $rootScope.metaDescriptionReview($rootScope.review);
        }]
	    }
		})
		.state('new_place', {
		  resolve: {
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]		
			},
		  url: '/create_place',
		  templateUrl: "<%= asset_path('templates/new_place.html.erb') %>",
		  controller: 'NewPlaceCtrl'
		})
		.state('new_review', {
		  resolve: {
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]				  
			},
		  url: '/places/{id}/new_review',
		  templateUrl: "<%= asset_path('templates/new_review.html.erb') %>",
		  controller: 'NewReviewCtrl'
		})
		.state('edit_review', {
		  resolve: {
			  reviews: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getReviews({place_id: $stateParams.id, review_id: $stateParams.review_id });
	  		}],
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]
			},
		  url: '/places/{id}/edit_review/{review_id}',
		  templateUrl: "<%= asset_path('templates/edit_review.html.erb') %>",
		  controller: 'EditReviewCtrl'
		})
		.state('edit_place', {
		  resolve: {
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]					  
			},
		  url: '/places/{id}/edit_place',
		  templateUrl: "<%= asset_path('templates/edit_place.html.erb') %>",
		  controller: 'EditPlaceCtrl'
		})
		.state('new_feedback', {
		  resolve: {
				places: ['dataProvider', '$stateParams', function(dataProvider, $stateParams) {
	  			return dataProvider.getPlaces($stateParams.id);
	  		}]					  
			},
		  url: '/write_us',
		  templateUrl: "<%= asset_path('templates/new_feedback.html.erb') %>",
		  controller: 'FeedbackCtrl'
		})
	  $urlRouterProvider.otherwise('home');
}]);

Topdoner.config(['$urlRouterProvider', '$stateProvider', 'UIRouterMetatagsProvider', configure]);


Topdoner.directive('starRating',
	['$compile',function($compile) {
		return {
			restrict : 'A',
			template : '<ul class="rating">'
					 + '	<li ng-repeat="star in stars" ng-class="star" ng-click="toggle($index)">'
					 + '\u2605'
					 + '</li>'
					 + '</ul>',
			scope : {
				ratingValue : '=',
				max : '=',
				onRatingSelected : '&'
			},
			link : function(scope, elem, attrs) {
				var updateStars = function() {
					scope.stars = [];
					for ( var i = 0; i < scope.max; i++) {
						scope.stars.push({
							filled : i < scope.ratingValue
						});
					}
				};
				
				scope.toggle = function(index) {
					scope.ratingValue = index + 1;
					scope.onRatingSelected({
						rating : index + 1
					});
				};
				
				scope.$watch('ratingValue',
					function(oldVal, newVal) {
						if (newVal) {
							updateStars();
						}
					}
				);
			}
		};
	}]
);